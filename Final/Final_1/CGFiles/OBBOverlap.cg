float main(float2 coords						: TEXCOORD0,
			uniform samplerRECT bBoxMinA		: TEXUNIT0,
			uniform samplerRECT bBoxMaxA		: TEXUNIT1,
			uniform samplerRECT bBoxMinB		: TEXUNIT2,
			uniform samplerRECT bBoxMaxB		: TEXUNIT3,
			uniform float3x3 R,
			uniform float3 T								):COLOR
{
	float4 boxMinA = texRECT(bBoxMinA, float2(coords.x,0.5));
	float4 boxMaxA = texRECT(bBoxMaxA, float2(coords.x,0.5));
	float4 boxMinB = texRECT(bBoxMinB, float2(coords.y,0.5)); 
	float4 boxMaxB = texRECT(bBoxMaxB, float2(coords.y,0.5));
	
	float3 centerA		= (boxMaxA.xyz + boxMinA.xyz) * 0.5;
	float3 extentA		= (boxMaxA.xyz - boxMinA.xyz) * 0.5;

	float3 origCenterB	= (boxMaxB.xyz + boxMinB.xyz) * 0.5;
	float3 extentB		= (boxMaxB.xyz - boxMinB.xyz) * 0.5;
    float3 centerB		= mul(R, origCenterB) + T;

	float3 separation	= centerB - centerA;

	float3 rotRow0 = float3(R._m00, R._m01, R._m02);
	float3 rotRow1 = float3(R._m10, R._m11, R._m12);
	float3 rotRow2 = float3(R._m20, R._m21, R._m22);

	float3 absRotRow0 = abs(float3(R._m00, R._m01, R._m02));
	float3 absRotRow1 = abs(float3(R._m10, R._m11, R._m12));
	float3 absRotRow2 = abs(float3(R._m20, R._m21, R._m22));
						
	float3 absRotCol0 = abs(float3(R._m00, R._m10, R._m20));
	float3 absRotCol1 = abs(float3(R._m01, R._m11, R._m21));
	float3 absRotCol2 = abs(float3(R._m02, R._m12, R._m22));

	float r, r0, r1, r01;

    //--- Test case 1 - X axis
    r = separation.x;
	r1 = dot(extentB, absRotCol0);
    r01 = extentA.x + r1;

    if (r > r01) discard;

    //--- Test case 1 - Y axis
    r = separation.y;
	r1 = dot(extentB, absRotCol1);
    r01 = extentA.y + r1;

    if (r > r01) discard;

    //--- Test case 1 - Z axis
    r = separation.z;
	r1 = dot(extentB, absRotCol2);
    r01 = extentA.z + r1;

	if (r > r01) discard;

    //--- Test case 2 - X axis
    r = abs(dot(rotRow0, separation));
    r0 = dot(extentA, absRotRow0);
    r01 = r0 + extentB.x;

    if (r > r01) discard;

    //--- Test case 2 - Y axis
    r = abs(dot(rotRow1, separation));
    r0 = dot(extentA, absRotRow1);
    r01 = r0 + extentB.y;

    if (r > r01) discard;

    //--- Test case 2 - Z axis
    r = abs(dot(rotRow2, separation));
    r0 = dot(extentA, absRotRow2);
    r01 = r0 + extentB.z;

    if (r > r01) discard;

    //--- Test case 3 # 1
	r = abs(separation.z * R._m01 - separation.y * R._m02);
    r0 = extentA.y * abs(R._m02)  + extentA.z * abs(R._m01);
    r1 = extentB.y * abs(R._m20)  + extentB.z * abs(R._m10);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 2
	r = abs(separation.z * R._m11 - separation.y * R._m12);
    r0 = extentA.y * abs(R._m12)  + extentA.z * abs(R._m11);
    r1 = extentB.x * abs(R._m20)  + extentB.z * abs(R._m00);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 3
	r = abs(separation.z * R._m21 - separation.y * R._m22);
    r0 = extentA.y * abs(R._m22) + extentA.z * abs(R._m21);
    r1 = extentB.x * abs(R._m10)  + extentB.y * abs(R._m00);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 4
	r = abs(separation.x * R._m02 - separation.z * R._m00);
    r0 = extentA.x * abs(R._m02) + extentA.z * abs(R._m00);
    r1 = extentB.y * abs(R._m21) + extentB.z * abs(R._m11);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 5
	r = abs(separation.x * R._m12 - separation.z * R._m10);
    r0 = extentA.x * abs(R._m12) + extentA.z * abs(R._m10);
    r1 = extentB.x * abs(R._m21) + extentB.z * abs(R._m01);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 6
	r = abs(separation.x * R._m22 - separation.z * R._m20);
    r0 = extentA.x * abs(R._m22) + extentA.z * abs(R._m20);
    r1 = extentB.x * abs(R._m11) + extentB.y * abs(R._m01);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 7
	r = abs(separation.y * R._m00 - separation.x * R._m01);
    r0 = extentA.x * abs(R._m01)  + extentA.y * abs(R._m00);
    r1 = extentB.y * abs(R._m22) + extentB.z * abs(R._m12);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 8
	r = abs(separation.y * R._m10 - separation.x * R._m11);
    r0 = extentA.x * abs(R._m11)  + extentA.y * abs(R._m10);
    r1 = extentB.x * abs(R._m22) + extentB.z * abs(R._m02);
    r01 = r0 + r1;

    if (r > r01) discard;

    //--- Test case 3 # 9
	r = abs(separation.y * R._m20 - separation.x * R._m21);
    r0 = extentA.x * abs(R._m21) + extentA.y * abs(R._m20);
    r1 = extentB.x * abs(R._m12) + extentB.y * abs(R._m02);
    r01 = r0 + r1;

    if (r > r01) discard;

	// No separating axis, then we have intersection
    return 1.0;  
}
