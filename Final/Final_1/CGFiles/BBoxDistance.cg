float4 main(float2 coords						: TEXCOORD0,
			uniform samplerRECT referenceList	: TEXUNIT0,
			uniform samplerRECT bBoxMinA		: TEXUNIT1,
			uniform samplerRECT bBoxMaxA		: TEXUNIT2,
			uniform samplerRECT bBoxMinB		: TEXUNIT3,
			uniform samplerRECT bBoxMaxB		: TEXUNIT4,
			uniform float levelOrigin						):COLOR
{
	int indexA = int(coords.x)%4;
	int indexB = int(coords.y)%4;
	float pixelOffset = 0.5;

	float2 referenceListIndex = floor(coords/4.0) + pixelOffset.xx;
	float4 indexOffset = texRECT(referenceList, referenceListIndex);

	if ( indexOffset.x < 0 )
		discard;

	float2 texIndexA = float2(levelOrigin + indexOffset.x + indexA%2, indexOffset.y + floor(indexA/2.0));
	float2 texIndexB = float2(levelOrigin + indexOffset.z + indexB%2, indexOffset.w + floor(indexB/2.0));

	float4 minPointA	= texRECT(bBoxMinA, texIndexA);
	float4 maxPointA	= texRECT(bBoxMaxA, texIndexA);
	float4 minPointB	= texRECT(bBoxMinB, texIndexB);
	float4 maxPointB	= texRECT(bBoxMaxB, texIndexB);

	float3 boxCenterA	= (maxPointA.xyz + minPointA.xyz) * 0.5;
	float3 boxExtentA	= (maxPointA.xyz - minPointA.xyz) * 0.5;

	float3 boxCenterB	= (maxPointB.xyz + minPointB.xyz) * 0.5;
	float3 boxExtentB	= (maxPointB.xyz - minPointB.xyz) * 0.5;

	float3 centerDistAB = abs(boxCenterB - boxCenterA);
	float3 maxDistAB = centerDistAB + boxExtentA + boxExtentB;
	float3 minDistAB = max(centerDistAB - boxExtentA - boxExtentB, float3(0, 0, 0));

	float4 distMinMax = float4(0, 0, coords.x, coords.y);
	distMinMax.x = length(minDistAB); 
	distMinMax.y = length(maxDistAB) - distMinMax.x;
	
	if (length(boxExtentA) == 0 || length(boxExtentB) == 0)
		distMinMax.xy = float2(-1,-1);

	return distMinMax;
}
